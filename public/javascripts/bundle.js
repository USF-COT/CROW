(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/home/mlindemu/crow/node_modules/google-maps/lib/Google.js":[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
(function() {
  var Google, promiseError;

  if (typeof window === 'undefined') {
    throw new Error('Google-maps package can be used only in browser.');
  }

  promiseError = function() {
    throw new Error('Using promises is not supported anymore. Please take a look in new documentation and use callback instead.');
  };

  Google = (function() {
    function Google() {}

    Google.URL = 'https://maps.googleapis.com/maps/api/js';

    Google.KEY = null;

    Google.LIBRARIES = [];

    Google.CLIENT = null;

    Google.SENSOR = false;

    Google._VERSION = "3.14";

    Google.VERSION = Google._VERSION;

    Google.WINDOW_CALLBACK_NAME = '__google_maps_api_provider_initializator__';

    Google.script = null;

    Google.google = null;

    Google.loading = false;

    Google.callbacks = [];

    Google.onLoadEvents = [];

    Google.load = function(fn) {
      if (fn == null) {
        fn = null;
      }
      if (this.google === null) {
        if (this.loading === true) {
          if (fn !== null) {
            this.callbacks.push(fn);
          }
        } else {
          this.loading = true;
          window[this.WINDOW_CALLBACK_NAME] = (function(_this) {
            return function() {
              return _this._ready(fn);
            };
          })(this);
          this.script = document.createElement('script');
          this.script.type = 'text/javascript';
          this.script.src = this.createUrl();
          document.body.appendChild(this.script);
        }
      } else if (fn !== null) {
        fn(this.google);
      }
      return {
        then: function() {
          return promiseError();
        },
        "catch": function() {
          return promiseError();
        },
        fail: function() {
          return promiseError();
        }
      };
    };

    Google.createUrl = function() {
      var url;
      url = this.URL;
      if (this.SENSOR === true || this.SENSOR === "true") {
        url += "?sensor=true";
      } else {
        url += "?sensor=false";
      }
      if (this.KEY != null) {
        url += "&key=" + this.KEY;
      }
      if (this.LIBRARIES.length > 0) {
        url += "&libraries=" + (this.LIBRARIES.join(','));
      }
      if (this.CLIENT != null) {
        url += "&client=" + this.CLIENT + "&v=" + this.VERSION;
      }
      url += "&callback=" + this.WINDOW_CALLBACK_NAME;
      return url;
    };

    Google.release = function(fn) {
      var _release;
      _release = (function(_this) {
        return function() {
          _this.KEY = null;
          _this.LIBRARIES = [];
          _this.CLIENT = null;
          _this.SENSOR = false;
          _this.VERSION = _this._VERSION;
          _this.google = null;
          _this.loading = false;
          _this.callbacks = [];
          _this.onLoadEvents = [];
          if (typeof window.google !== 'undefined') {
            delete window.google;
          }
          if (typeof window[_this.WINDOW_CALLBACK_NAME] !== 'undefined') {
            delete window[_this.WINDOW_CALLBACK_NAME];
          }
          if (_this.script !== null) {
            _this.script.parentElement.removeChild(_this.script);
            _this.script = null;
          }
          return fn();
        };
      })(this);
      if (this.loading) {
        return this.load(function() {
          return _release();
        });
      } else {
        return _release();
      }
    };

    Google.onLoad = function(fn) {
      return this.onLoadEvents.push(fn);
    };

    Google._ready = function(fn) {
      var event, _i, _j, _len, _len1, _ref, _ref1;
      if (fn == null) {
        fn = null;
      }
      Google.loading = false;
      if (Google.google === null) {
        Google.google = window.google;
      }
      _ref = Google.onLoadEvents;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        event = _ref[_i];
        event(Google.google);
      }
      if (fn !== null) {
        fn(Google.google);
      }
      _ref1 = Google.callbacks;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        fn = _ref1[_j];
        fn(Google.google);
      }
      return Google.callbacks = [];
    };

    return Google;

  })();

  if (typeof module === 'object') {
    module.exports = Google;
  } else {
    window.GoogleMapsLoader = Google;
  }

}).call(this);

},{}],"/home/mlindemu/crow/node_modules/reflux/index.js":[function(require,module,exports){
module.exports = require('./src');

},{"./src":"/home/mlindemu/crow/node_modules/reflux/src/index.js"}],"/home/mlindemu/crow/node_modules/reflux/node_modules/eventemitter3/index.js":[function(require,module,exports){
'use strict';

/**
 * Representation of a single EventEmitter function.
 *
 * @param {Function} fn Event handler to be called.
 * @param {Mixed} context Context for function execution.
 * @param {Boolean} once Only emit once
 * @api private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Minimal EventEmitter interface that is molded against the Node.js
 * EventEmitter interface.
 *
 * @constructor
 * @api public
 */
function EventEmitter() { /* Nothing to set */ }

/**
 * Holds the assigned EventEmitters by name.
 *
 * @type {Object}
 * @private
 */
EventEmitter.prototype._events = undefined;

/**
 * Return a list of assigned event listeners.
 *
 * @param {String} event The events that should be listed.
 * @returns {Array}
 * @api public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  if (!this._events || !this._events[event]) return [];
  if (this._events[event].fn) return [this._events[event].fn];

  for (var i = 0, l = this._events[event].length, ee = new Array(l); i < l; i++) {
    ee[i] = this._events[event][i].fn;
  }

  return ee;
};

/**
 * Emit an event to all registered event listeners.
 *
 * @param {String} event The name of the event.
 * @returns {Boolean} Indication if we've emitted an event.
 * @api public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  if (!this._events || !this._events[event]) return false;

  var listeners = this._events[event]
    , len = arguments.length
    , args
    , i;

  if ('function' === typeof listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Register a new EventListener for the given event.
 *
 * @param {String} event Name of the event.
 * @param {Functon} fn Callback function.
 * @param {Mixed} context The context of the function.
 * @api public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  var listener = new EE(fn, context || this);

  if (!this._events) this._events = {};
  if (!this._events[event]) this._events[event] = listener;
  else {
    if (!this._events[event].fn) this._events[event].push(listener);
    else this._events[event] = [
      this._events[event], listener
    ];
  }

  return this;
};

/**
 * Add an EventListener that's only called once.
 *
 * @param {String} event Name of the event.
 * @param {Function} fn Callback function.
 * @param {Mixed} context The context of the function.
 * @api public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  var listener = new EE(fn, context || this, true);

  if (!this._events) this._events = {};
  if (!this._events[event]) this._events[event] = listener;
  else {
    if (!this._events[event].fn) this._events[event].push(listener);
    else this._events[event] = [
      this._events[event], listener
    ];
  }

  return this;
};

/**
 * Remove event listeners.
 *
 * @param {String} event The event we want to remove.
 * @param {Function} fn The listener that we need to find.
 * @param {Boolean} once Only remove once listeners.
 * @api public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, once) {
  if (!this._events || !this._events[event]) return this;

  var listeners = this._events[event]
    , events = [];

  if (fn) {
    if (listeners.fn && (listeners.fn !== fn || (once && !listeners.once))) {
      events.push(listeners);
    }
    if (!listeners.fn) for (var i = 0, length = listeners.length; i < length; i++) {
      if (listeners[i].fn !== fn || (once && !listeners[i].once)) {
        events.push(listeners[i]);
      }
    }
  }

  //
  // Reset the array, or remove it completely if we have no more listeners.
  //
  if (events.length) {
    this._events[event] = events.length === 1 ? events[0] : events;
  } else {
    delete this._events[event];
  }

  return this;
};

/**
 * Remove all listeners or only the listeners for the specified event.
 *
 * @param {String} event The event want to remove all listeners for.
 * @api public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  if (!this._events) return this;

  if (event) delete this._events[event];
  else this._events = {};

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// This function doesn't apply anymore.
//
EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
  return this;
};

//
// Expose the module.
//
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.EventEmitter2 = EventEmitter;
EventEmitter.EventEmitter3 = EventEmitter;

//
// Expose the module.
//
module.exports = EventEmitter;

},{}],"/home/mlindemu/crow/node_modules/reflux/node_modules/native-promise-only/npo.js":[function(require,module,exports){
(function (global){
/*! Native Promise Only
    v0.7.6-a (c) Kyle Simpson
    MIT License: http://getify.mit-license.org
*/
!function(t,n,e){n[t]=n[t]||e(),"undefined"!=typeof module&&module.exports?module.exports=n[t]:"function"==typeof define&&define.amd&&define(function(){return n[t]})}("Promise","undefined"!=typeof global?global:this,function(){"use strict";function t(t,n){l.add(t,n),h||(h=y(l.drain))}function n(t){var n,e=typeof t;return null==t||"object"!=e&&"function"!=e||(n=t.then),"function"==typeof n?n:!1}function e(){for(var t=0;t<this.chain.length;t++)o(this,1===this.state?this.chain[t].success:this.chain[t].failure,this.chain[t]);this.chain.length=0}function o(t,e,o){var r,i;try{e===!1?o.reject(t.msg):(r=e===!0?t.msg:e.call(void 0,t.msg),r===o.promise?o.reject(TypeError("Promise-chain cycle")):(i=n(r))?i.call(r,o.resolve,o.reject):o.resolve(r))}catch(c){o.reject(c)}}function r(o){var c,u,a=this;if(!a.triggered){a.triggered=!0,a.def&&(a=a.def);try{(c=n(o))?(u=new f(a),c.call(o,function(){r.apply(u,arguments)},function(){i.apply(u,arguments)})):(a.msg=o,a.state=1,a.chain.length>0&&t(e,a))}catch(s){i.call(u||new f(a),s)}}}function i(n){var o=this;o.triggered||(o.triggered=!0,o.def&&(o=o.def),o.msg=n,o.state=2,o.chain.length>0&&t(e,o))}function c(t,n,e,o){for(var r=0;r<n.length;r++)!function(r){t.resolve(n[r]).then(function(t){e(r,t)},o)}(r)}function f(t){this.def=t,this.triggered=!1}function u(t){this.promise=t,this.state=0,this.triggered=!1,this.chain=[],this.msg=void 0}function a(n){if("function"!=typeof n)throw TypeError("Not a function");if(0!==this.__NPO__)throw TypeError("Not a promise");this.__NPO__=1;var o=new u(this);this.then=function(n,r){var i={success:"function"==typeof n?n:!0,failure:"function"==typeof r?r:!1};return i.promise=new this.constructor(function(t,n){if("function"!=typeof t||"function"!=typeof n)throw TypeError("Not a function");i.resolve=t,i.reject=n}),o.chain.push(i),0!==o.state&&t(e,o),i.promise},this["catch"]=function(t){return this.then(void 0,t)};try{n.call(void 0,function(t){r.call(o,t)},function(t){i.call(o,t)})}catch(c){i.call(o,c)}}var s,h,l,p=Object.prototype.toString,y="undefined"!=typeof setImmediate?function(t){return setImmediate(t)}:setTimeout;try{Object.defineProperty({},"x",{}),s=function(t,n,e,o){return Object.defineProperty(t,n,{value:e,writable:!0,configurable:o!==!1})}}catch(d){s=function(t,n,e){return t[n]=e,t}}l=function(){function t(t,n){this.fn=t,this.self=n,this.next=void 0}var n,e,o;return{add:function(r,i){o=new t(r,i),e?e.next=o:n=o,e=o,o=void 0},drain:function(){var t=n;for(n=e=h=void 0;t;)t.fn.call(t.self),t=t.next}}}();var g=s({},"constructor",a,!1);return s(a,"prototype",g,!1),s(g,"__NPO__",0,!1),s(a,"resolve",function(t){var n=this;return t&&"object"==typeof t&&1===t.__NPO__?t:new n(function(n,e){if("function"!=typeof n||"function"!=typeof e)throw TypeError("Not a function");n(t)})}),s(a,"reject",function(t){return new this(function(n,e){if("function"!=typeof n||"function"!=typeof e)throw TypeError("Not a function");e(t)})}),s(a,"all",function(t){var n=this;return"[object Array]"!=p.call(t)?n.reject(TypeError("Not an array")):0===t.length?n.resolve([]):new n(function(e,o){if("function"!=typeof e||"function"!=typeof o)throw TypeError("Not a function");var r=t.length,i=Array(r),f=0;c(n,t,function(t,n){i[t]=n,++f===r&&e(i)},o)})}),s(a,"race",function(t){var n=this;return"[object Array]"!=p.call(t)?n.reject(TypeError("Not an array")):new n(function(e,o){if("function"!=typeof e||"function"!=typeof o)throw TypeError("Not a function");c(n,t,function(t,n){e(n)},o)})}),a});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/home/mlindemu/crow/node_modules/reflux/src/ActionMethods.js":[function(require,module,exports){
/**
 * A module of methods that you want to include in all actions.
 * This module is consumed by `createAction`.
 */
module.exports = {
};

},{}],"/home/mlindemu/crow/node_modules/reflux/src/Keep.js":[function(require,module,exports){
exports.createdStores = [];

exports.createdActions = [];

exports.reset = function() {
    while(exports.createdStores.length) {
        exports.createdStores.pop();
    }
    while(exports.createdActions.length) {
        exports.createdActions.pop();
    }
};

},{}],"/home/mlindemu/crow/node_modules/reflux/src/ListenerMethods.js":[function(require,module,exports){
var _ = require('./utils'),
    maker = require('./joins').instanceJoinCreator;

/**
 * Extract child listenables from a parent from their
 * children property and return them in a keyed Object
 *
 * @param {Object} listenable The parent listenable
 */
var mapChildListenables = function(listenable) {
    var i = 0, children = {}, childName;
    for (;i < (listenable.children||[]).length; ++i) {
        childName = listenable.children[i];
        if(listenable[childName]){
            children[childName] = listenable[childName];
        }
    }
    return children;
};

/**
 * Make a flat dictionary of all listenables including their
 * possible children (recursively), concatenating names in camelCase.
 *
 * @param {Object} listenables The top-level listenables
 */
var flattenListenables = function(listenables) {
    var flattened = {};
    for(var key in listenables){
        var listenable = listenables[key];
        var childMap = mapChildListenables(listenable);

        // recursively flatten children
        var children = flattenListenables(childMap);

        // add the primary listenable and chilren
        flattened[key] = listenable;
        for(var childKey in children){
            var childListenable = children[childKey];
            flattened[key + _.capitalize(childKey)] = childListenable;
        }
    }

    return flattened;
};

/**
 * A module of methods related to listening.
 */
module.exports = {

    /**
     * An internal utility function used by `validateListening`
     *
     * @param {Action|Store} listenable The listenable we want to search for
     * @returns {Boolean} The result of a recursive search among `this.subscriptions`
     */
    hasListener: function(listenable) {
        var i = 0, j, listener, listenables;
        for (;i < (this.subscriptions||[]).length; ++i) {
            listenables = [].concat(this.subscriptions[i].listenable);
            for (j = 0; j < listenables.length; j++){
                listener = listenables[j];
                if (listener === listenable || listener.hasListener && listener.hasListener(listenable)) {
                    return true;
                }
            }
        }
        return false;
    },

    /**
     * A convenience method that listens to all listenables in the given object.
     *
     * @param {Object} listenables An object of listenables. Keys will be used as callback method names.
     */
    listenToMany: function(listenables){
        var allListenables = flattenListenables(listenables);
        for(var key in allListenables){
            var cbname = _.callbackName(key),
                localname = this[cbname] ? cbname : this[key] ? key : undefined;
            if (localname){
                this.listenTo(allListenables[key],localname,this[cbname+"Default"]||this[localname+"Default"]||localname);
            }
        }
    },

    /**
     * Checks if the current context can listen to the supplied listenable
     *
     * @param {Action|Store} listenable An Action or Store that should be
     *  listened to.
     * @returns {String|Undefined} An error message, or undefined if there was no problem.
     */
    validateListening: function(listenable){
        if (listenable === this) {
            return "Listener is not able to listen to itself";
        }
        if (!_.isFunction(listenable.listen)) {
            return listenable + " is missing a listen method";
        }
        if (listenable.hasListener && listenable.hasListener(this)) {
            return "Listener cannot listen to this listenable because of circular loop";
        }
    },

    /**
     * Sets up a subscription to the given listenable for the context object
     *
     * @param {Action|Store} listenable An Action or Store that should be
     *  listened to.
     * @param {Function|String} callback The callback to register as event handler
     * @param {Function|String} defaultCallback The callback to register as default handler
     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is the object being listened to
     */
    listenTo: function(listenable, callback, defaultCallback) {
        var desub, unsubscriber, subscriptionobj, subs = this.subscriptions = this.subscriptions || [];
        _.throwIf(this.validateListening(listenable));
        this.fetchInitialState(listenable, defaultCallback);
        desub = listenable.listen(this[callback]||callback, this);
        unsubscriber = function() {
            var index = subs.indexOf(subscriptionobj);
            _.throwIf(index === -1,'Tried to remove listen already gone from subscriptions list!');
            subs.splice(index, 1);
            desub();
        };
        subscriptionobj = {
            stop: unsubscriber,
            listenable: listenable
        };
        subs.push(subscriptionobj);
        return subscriptionobj;
    },

    /**
     * Stops listening to a single listenable
     *
     * @param {Action|Store} listenable The action or store we no longer want to listen to
     * @returns {Boolean} True if a subscription was found and removed, otherwise false.
     */
    stopListeningTo: function(listenable){
        var sub, i = 0, subs = this.subscriptions || [];
        for(;i < subs.length; i++){
            sub = subs[i];
            if (sub.listenable === listenable){
                sub.stop();
                _.throwIf(subs.indexOf(sub)!==-1,'Failed to remove listen from subscriptions list!');
                return true;
            }
        }
        return false;
    },

    /**
     * Stops all subscriptions and empties subscriptions array
     */
    stopListeningToAll: function(){
        var remaining, subs = this.subscriptions || [];
        while((remaining=subs.length)){
            subs[0].stop();
            _.throwIf(subs.length!==remaining-1,'Failed to remove listen from subscriptions list!');
        }
    },

    /**
     * Used in `listenTo`. Fetches initial data from a publisher if it has a `getInitialState` method.
     * @param {Action|Store} listenable The publisher we want to get initial state from
     * @param {Function|String} defaultCallback The method to receive the data
     */
    fetchInitialState: function (listenable, defaultCallback) {
        defaultCallback = (defaultCallback && this[defaultCallback]) || defaultCallback;
        var me = this;
        if (_.isFunction(defaultCallback) && _.isFunction(listenable.getInitialState)) {
            var data = listenable.getInitialState();
            if (data && _.isFunction(data.then)) {
                data.then(function() {
                    defaultCallback.apply(me, arguments);
                });
            } else {
                defaultCallback.call(this, data);
            }
        }
    },

    /**
     * The callback will be called once all listenables have triggered at least once.
     * It will be invoked with the last emission from each listenable.
     * @param {...Publishers} publishers Publishers that should be tracked.
     * @param {Function|String} callback The method to call when all publishers have emitted
     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables
     */
    joinTrailing: maker("last"),

    /**
     * The callback will be called once all listenables have triggered at least once.
     * It will be invoked with the first emission from each listenable.
     * @param {...Publishers} publishers Publishers that should be tracked.
     * @param {Function|String} callback The method to call when all publishers have emitted
     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables
     */
    joinLeading: maker("first"),

    /**
     * The callback will be called once all listenables have triggered at least once.
     * It will be invoked with all emission from each listenable.
     * @param {...Publishers} publishers Publishers that should be tracked.
     * @param {Function|String} callback The method to call when all publishers have emitted
     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables
     */
    joinConcat: maker("all"),

    /**
     * The callback will be called once all listenables have triggered.
     * If a callback triggers twice before that happens, an error is thrown.
     * @param {...Publishers} publishers Publishers that should be tracked.
     * @param {Function|String} callback The method to call when all publishers have emitted
     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables
     */
    joinStrict: maker("strict")
};

},{"./joins":"/home/mlindemu/crow/node_modules/reflux/src/joins.js","./utils":"/home/mlindemu/crow/node_modules/reflux/src/utils.js"}],"/home/mlindemu/crow/node_modules/reflux/src/ListenerMixin.js":[function(require,module,exports){
var _ = require('./utils'),
    ListenerMethods = require('./ListenerMethods');

/**
 * A module meant to be consumed as a mixin by a React component. Supplies the methods from
 * `ListenerMethods` mixin and takes care of teardown of subscriptions.
 * Note that if you're using the `connect` mixin you don't need this mixin, as connect will
 * import everything this mixin contains!
 */
module.exports = _.extend({

    /**
     * Cleans up all listener previously registered.
     */
    componentWillUnmount: ListenerMethods.stopListeningToAll

}, ListenerMethods);

},{"./ListenerMethods":"/home/mlindemu/crow/node_modules/reflux/src/ListenerMethods.js","./utils":"/home/mlindemu/crow/node_modules/reflux/src/utils.js"}],"/home/mlindemu/crow/node_modules/reflux/src/PublisherMethods.js":[function(require,module,exports){
var _ = require('./utils');

/**
 * A module of methods for object that you want to be able to listen to.
 * This module is consumed by `createStore` and `createAction`
 */
module.exports = {

    /**
     * Hook used by the publisher that is invoked before emitting
     * and before `shouldEmit`. The arguments are the ones that the action
     * is invoked with. If this function returns something other than
     * undefined, that will be passed on as arguments for shouldEmit and
     * emission.
     */
    preEmit: function() {},

    /**
     * Hook used by the publisher after `preEmit` to determine if the
     * event should be emitted with given arguments. This may be overridden
     * in your application, default implementation always returns true.
     *
     * @returns {Boolean} true if event should be emitted
     */
    shouldEmit: function() { return true; },

    /**
     * Subscribes the given callback for action triggered
     *
     * @param {Function} callback The callback to register as event handler
     * @param {Mixed} [optional] bindContext The context to bind the callback with
     * @returns {Function} Callback that unsubscribes the registered event handler
     */
    listen: function(callback, bindContext) {
        bindContext = bindContext || this;
        var eventHandler = function(args) {
            callback.apply(bindContext, args);
        }, me = this;
        this.emitter.addListener(this.eventLabel, eventHandler);
        return function() {
            me.emitter.removeListener(me.eventLabel, eventHandler);
        };
    },

    /**
     * Attach handlers to promise that trigger the completed and failed
     * child publishers, if available.
     *
     * @param {Object} The promise to attach to
     */
    promise: function(promise) {
        var me = this;

        var canHandlePromise =
            this.children.indexOf('completed') >= 0 &&
            this.children.indexOf('failed') >= 0;

        if (!canHandlePromise){
            throw new Error('Publisher must have "completed" and "failed" child publishers');
        }

        promise.then(function(response) {
            return me.completed(response);
        });
        // IE compatibility - catch is a reserved word - without bracket notation source compilation will fail under IE
        promise["catch"](function(error) {
            return me.failed(error);
        });
    },

    /**
     * Subscribes the given callback for action triggered, which should
     * return a promise that in turn is passed to `this.promise`
     *
     * @param {Function} callback The callback to register as event handler
     */
    listenAndPromise: function(callback, bindContext) {
        var me = this;
        bindContext = bindContext || this;

        return this.listen(function() {

            if (!callback) {
                throw new Error('Expected a function returning a promise but got ' + callback);
            }

            var args = arguments,
                promise = callback.apply(bindContext, args);
            return me.promise.call(me, promise);
        }, bindContext);
    },

    /**
     * Publishes an event using `this.emitter` (if `shouldEmit` agrees)
     */
    trigger: function() {
        var args = arguments,
            pre = this.preEmit.apply(this, args);
        args = pre === undefined ? args : _.isArguments(pre) ? pre : [].concat(pre);
        if (this.shouldEmit.apply(this, args)) {
            this.emitter.emit(this.eventLabel, args);
        }
    },

    /**
     * Tries to publish the event on the next tick
     */
    triggerAsync: function(){
        var args = arguments,me = this;
        _.nextTick(function() {
            me.trigger.apply(me, args);
        });
    },

    /**
     * Returns a Promise for the triggered action
     */
    triggerPromise: function(){
        var me = this;
        var args = arguments;

        var canHandlePromise =
            this.children.indexOf('completed') >= 0 &&
            this.children.indexOf('failed') >= 0;

        if (!canHandlePromise){
            throw new Error('Publisher must have "completed" and "failed" child publishers');
        }

        var promise = _.createPromise(function(resolve, reject) {
            var removeSuccess = me.completed.listen(function(args) {
                removeSuccess();
                removeFailed();
                resolve(args);
            });

            var removeFailed = me.failed.listen(function(args) {
                removeSuccess();
                removeFailed();
                reject(args);
            });

            me.triggerAsync.apply(me, args);
        });

        return promise;
    },
};

},{"./utils":"/home/mlindemu/crow/node_modules/reflux/src/utils.js"}],"/home/mlindemu/crow/node_modules/reflux/src/StoreMethods.js":[function(require,module,exports){
/**
 * A module of methods that you want to include in all stores.
 * This module is consumed by `createStore`.
 */
module.exports = {
};

},{}],"/home/mlindemu/crow/node_modules/reflux/src/bindMethods.js":[function(require,module,exports){
module.exports = function(store, definition) {
  for (var name in definition) {
    var property = definition[name];

    if (typeof property !== 'function' || !definition.hasOwnProperty(name)) {
      continue;
    }

    store[name] = property.bind(store);
  }

  return store;
};

},{}],"/home/mlindemu/crow/node_modules/reflux/src/connect.js":[function(require,module,exports){
var Reflux = require('./index'),
    _ = require('./utils');

module.exports = function(listenable,key){
    return {
        getInitialState: function(){
            if (!_.isFunction(listenable.getInitialState)) {
                return {};
            } else if (key === undefined) {
                return listenable.getInitialState();
            } else {
                return _.object([key],[listenable.getInitialState()]);
            }
        },
        componentDidMount: function(){
            _.extend(this,Reflux.ListenerMethods);
            var me = this, cb = (key === undefined ? this.setState : function(v){me.setState(_.object([key],[v]));});
            this.listenTo(listenable,cb);
        },
        componentWillUnmount: Reflux.ListenerMixin.componentWillUnmount
    };
};

},{"./index":"/home/mlindemu/crow/node_modules/reflux/src/index.js","./utils":"/home/mlindemu/crow/node_modules/reflux/src/utils.js"}],"/home/mlindemu/crow/node_modules/reflux/src/connectFilter.js":[function(require,module,exports){
var Reflux = require('./index'),
  _ = require('./utils');

module.exports = function(listenable, key, filterFunc) {
    filterFunc = _.isFunction(key) ? key : filterFunc;
    return {
        getInitialState: function() {
            if (!_.isFunction(listenable.getInitialState)) {
                return {};
            } else if (_.isFunction(key)) {
                return filterFunc.call(this, listenable.getInitialState());
            } else {
                // Filter initial payload from store.
                var result = filterFunc.call(this, listenable.getInitialState());
                if (result) {
                  return _.object([key], [result]);
                } else {
                  return {};
                }
            }
        },
        componentDidMount: function() {
            _.extend(this, Reflux.ListenerMethods);
            var me = this;
            var cb = function(value) {
                if (_.isFunction(key)) {
                    me.setState(filterFunc.call(me, value));
                } else {
                    var result = filterFunc.call(me, value);
                    me.setState(_.object([key], [result]));
                }
            };

            this.listenTo(listenable, cb);
        },
        componentWillUnmount: Reflux.ListenerMixin.componentWillUnmount
    };
};


},{"./index":"/home/mlindemu/crow/node_modules/reflux/src/index.js","./utils":"/home/mlindemu/crow/node_modules/reflux/src/utils.js"}],"/home/mlindemu/crow/node_modules/reflux/src/createAction.js":[function(require,module,exports){
var _ = require('./utils'),
    Reflux = require('./index'),
    Keep = require('./Keep'),
    allowed = {preEmit:1,shouldEmit:1};

/**
 * Creates an action functor object. It is mixed in with functions
 * from the `PublisherMethods` mixin. `preEmit` and `shouldEmit` may
 * be overridden in the definition object.
 *
 * @param {Object} definition The action object definition
 */
var createAction = function(definition) {

    definition = definition || {};
    if (!_.isObject(definition)){
        definition = {actionName: definition};
    }

    for(var a in Reflux.ActionMethods){
        if (!allowed[a] && Reflux.PublisherMethods[a]) {
            throw new Error("Cannot override API method " + a +
                " in Reflux.ActionMethods. Use another method name or override it on Reflux.PublisherMethods instead."
            );
        }
    }

    for(var d in definition){
        if (!allowed[d] && Reflux.PublisherMethods[d]) {
            throw new Error("Cannot override API method " + d +
                " in action creation. Use another method name or override it on Reflux.PublisherMethods instead."
            );
        }
    }

    definition.children = definition.children || [];
    if (definition.asyncResult){
        definition.children = definition.children.concat(["completed","failed"]);
    }

    var i = 0, childActions = {};
    for (; i < definition.children.length; i++) {
        var name = definition.children[i];
        childActions[name] = createAction(name);
    }

    var context = _.extend({
        eventLabel: "action",
        emitter: new _.EventEmitter(),
        _isAction: true
    }, Reflux.PublisherMethods, Reflux.ActionMethods, definition);

    var functor = function() {
        functor[functor.sync?"trigger":"triggerAsync"].apply(functor, arguments);
    };

    _.extend(functor,childActions,context);

    Keep.createdActions.push(functor);

    return functor;

};

module.exports = createAction;

},{"./Keep":"/home/mlindemu/crow/node_modules/reflux/src/Keep.js","./index":"/home/mlindemu/crow/node_modules/reflux/src/index.js","./utils":"/home/mlindemu/crow/node_modules/reflux/src/utils.js"}],"/home/mlindemu/crow/node_modules/reflux/src/createStore.js":[function(require,module,exports){
var _ = require('./utils'),
    Reflux = require('./index'),
    Keep = require('./Keep'),
    mixer = require('./mixer'),
    allowed = {preEmit:1,shouldEmit:1},
    bindMethods = require('./bindMethods');

/**
 * Creates an event emitting Data Store. It is mixed in with functions
 * from the `ListenerMethods` and `PublisherMethods` mixins. `preEmit`
 * and `shouldEmit` may be overridden in the definition object.
 *
 * @param {Object} definition The data store object definition
 * @returns {Store} A data store instance
 */
module.exports = function(definition) {

    definition = definition || {};

    for(var a in Reflux.StoreMethods){
        if (!allowed[a] && (Reflux.PublisherMethods[a] || Reflux.ListenerMethods[a])){
            throw new Error("Cannot override API method " + a +
                " in Reflux.StoreMethods. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead."
            );
        }
    }

    for(var d in definition){
        if (!allowed[d] && (Reflux.PublisherMethods[d] || Reflux.ListenerMethods[d])){
            throw new Error("Cannot override API method " + d +
                " in store creation. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead."
            );
        }
    }

    definition = mixer(definition);

    function Store() {
        var i=0, arr;
        this.subscriptions = [];
        this.emitter = new _.EventEmitter();
        this.eventLabel = "change";
        bindMethods(this, definition);
        if (this.init && _.isFunction(this.init)) {
            this.init();
        }
        if (this.listenables){
            arr = [].concat(this.listenables);
            for(;i < arr.length;i++){
                this.listenToMany(arr[i]);
            }
        }
    }

    _.extend(Store.prototype, Reflux.ListenerMethods, Reflux.PublisherMethods, Reflux.StoreMethods, definition);

    var store = new Store();
    Keep.createdStores.push(store);

    return store;
};

},{"./Keep":"/home/mlindemu/crow/node_modules/reflux/src/Keep.js","./bindMethods":"/home/mlindemu/crow/node_modules/reflux/src/bindMethods.js","./index":"/home/mlindemu/crow/node_modules/reflux/src/index.js","./mixer":"/home/mlindemu/crow/node_modules/reflux/src/mixer.js","./utils":"/home/mlindemu/crow/node_modules/reflux/src/utils.js"}],"/home/mlindemu/crow/node_modules/reflux/src/index.js":[function(require,module,exports){
exports.ActionMethods = require('./ActionMethods');

exports.ListenerMethods = require('./ListenerMethods');

exports.PublisherMethods = require('./PublisherMethods');

exports.StoreMethods = require('./StoreMethods');

exports.createAction = require('./createAction');

exports.createStore = require('./createStore');

exports.connect = require('./connect');

exports.connectFilter = require('./connectFilter');

exports.ListenerMixin = require('./ListenerMixin');

exports.listenTo = require('./listenTo');

exports.listenToMany = require('./listenToMany');


var maker = require('./joins').staticJoinCreator;

exports.joinTrailing = exports.all = maker("last"); // Reflux.all alias for backward compatibility

exports.joinLeading = maker("first");

exports.joinStrict = maker("strict");

exports.joinConcat = maker("all");

var _ = require('./utils');

/**
 * Convenience function for creating a set of actions
 *
 * @param definitions the definitions for the actions to be created
 * @returns an object with actions of corresponding action names
 */
exports.createActions = function(definitions) {
    var actions = {};
    for (var k in definitions){
        var val = definitions[k],
            actionName = _.isObject(val) ? k : val;

        actions[actionName] = exports.createAction(val);
    }
    return actions;
};

/**
 * Sets the eventmitter that Reflux uses
 */
exports.setEventEmitter = function(ctx) {
    var _ = require('./utils');
    _.EventEmitter = ctx;
};


/**
 * Sets the Promise library that Reflux uses
 */
exports.setPromise = function(ctx) {
    var _ = require('./utils');
    _.Promise = ctx;
};

/**
 * Sets the Promise factory that creates new promises
 * @param {Function} factory has the signature `function(resolver) { return [new Promise]; }`
 */
exports.setPromiseFactory = function(factory) {
    var _ = require('./utils');
    _.createPromise = factory;
};


/**
 * Sets the method used for deferring actions and stores
 */
exports.nextTick = function(nextTick) {
    var _ = require('./utils');
    _.nextTick = nextTick;
};

/**
 * Provides the set of created actions and stores for introspection
 */
exports.__keep = require('./Keep');

/**
 * Warn if Function.prototype.bind not available
 */
if (!Function.prototype.bind) {
  console.error(
    'Function.prototype.bind not available. ' +
    'ES5 shim required. ' +
    'https://github.com/spoike/refluxjs#es5'
  );
}

},{"./ActionMethods":"/home/mlindemu/crow/node_modules/reflux/src/ActionMethods.js","./Keep":"/home/mlindemu/crow/node_modules/reflux/src/Keep.js","./ListenerMethods":"/home/mlindemu/crow/node_modules/reflux/src/ListenerMethods.js","./ListenerMixin":"/home/mlindemu/crow/node_modules/reflux/src/ListenerMixin.js","./PublisherMethods":"/home/mlindemu/crow/node_modules/reflux/src/PublisherMethods.js","./StoreMethods":"/home/mlindemu/crow/node_modules/reflux/src/StoreMethods.js","./connect":"/home/mlindemu/crow/node_modules/reflux/src/connect.js","./connectFilter":"/home/mlindemu/crow/node_modules/reflux/src/connectFilter.js","./createAction":"/home/mlindemu/crow/node_modules/reflux/src/createAction.js","./createStore":"/home/mlindemu/crow/node_modules/reflux/src/createStore.js","./joins":"/home/mlindemu/crow/node_modules/reflux/src/joins.js","./listenTo":"/home/mlindemu/crow/node_modules/reflux/src/listenTo.js","./listenToMany":"/home/mlindemu/crow/node_modules/reflux/src/listenToMany.js","./utils":"/home/mlindemu/crow/node_modules/reflux/src/utils.js"}],"/home/mlindemu/crow/node_modules/reflux/src/joins.js":[function(require,module,exports){
/**
 * Internal module used to create static and instance join methods
 */

var slice = Array.prototype.slice,
    _ = require("./utils"),
    createStore = require("./createStore"),
    strategyMethodNames = {
        strict: "joinStrict",
        first: "joinLeading",
        last: "joinTrailing",
        all: "joinConcat"
    };

/**
 * Used in `index.js` to create the static join methods
 * @param {String} strategy Which strategy to use when tracking listenable trigger arguments
 * @returns {Function} A static function which returns a store with a join listen on the given listenables using the given strategy
 */
exports.staticJoinCreator = function(strategy){
    return function(/* listenables... */) {
        var listenables = slice.call(arguments);
        return createStore({
            init: function(){
                this[strategyMethodNames[strategy]].apply(this,listenables.concat("triggerAsync"));
            }
        });
    };
};

/**
 * Used in `ListenerMethods.js` to create the instance join methods
 * @param {String} strategy Which strategy to use when tracking listenable trigger arguments
 * @returns {Function} An instance method which sets up a join listen on the given listenables using the given strategy
 */
exports.instanceJoinCreator = function(strategy){
    return function(/* listenables..., callback*/){
        _.throwIf(arguments.length < 3,'Cannot create a join with less than 2 listenables!');
        var listenables = slice.call(arguments),
            callback = listenables.pop(),
            numberOfListenables = listenables.length,
            join = {
                numberOfListenables: numberOfListenables,
                callback: this[callback]||callback,
                listener: this,
                strategy: strategy
            }, i, cancels = [], subobj;
        for (i = 0; i < numberOfListenables; i++) {
            _.throwIf(this.validateListening(listenables[i]));
        }
        for (i = 0; i < numberOfListenables; i++) {
            cancels.push(listenables[i].listen(newListener(i,join),this));
        }
        reset(join);
        subobj = {listenable: listenables};
        subobj.stop = makeStopper(subobj,cancels,this);
        this.subscriptions = (this.subscriptions || []).concat(subobj);
        return subobj;
    };
};

// ---- internal join functions ----

function makeStopper(subobj,cancels,context){
    return function() {
        var i, subs = context.subscriptions,
            index = (subs ? subs.indexOf(subobj) : -1);
        _.throwIf(index === -1,'Tried to remove join already gone from subscriptions list!');
        for(i=0;i < cancels.length; i++){
            cancels[i]();
        }
        subs.splice(index, 1);
    };
}

function reset(join) {
    join.listenablesEmitted = new Array(join.numberOfListenables);
    join.args = new Array(join.numberOfListenables);
}

function newListener(i,join) {
    return function() {
        var callargs = slice.call(arguments);
        if (join.listenablesEmitted[i]){
            switch(join.strategy){
                case "strict": throw new Error("Strict join failed because listener triggered twice.");
                case "last": join.args[i] = callargs; break;
                case "all": join.args[i].push(callargs);
            }
        } else {
            join.listenablesEmitted[i] = true;
            join.args[i] = (join.strategy==="all"?[callargs]:callargs);
        }
        emitIfAllListenablesEmitted(join);
    };
}

function emitIfAllListenablesEmitted(join) {
    for (var i = 0; i < join.numberOfListenables; i++) {
        if (!join.listenablesEmitted[i]) {
            return;
        }
    }
    join.callback.apply(join.listener,join.args);
    reset(join);
}

},{"./createStore":"/home/mlindemu/crow/node_modules/reflux/src/createStore.js","./utils":"/home/mlindemu/crow/node_modules/reflux/src/utils.js"}],"/home/mlindemu/crow/node_modules/reflux/src/listenTo.js":[function(require,module,exports){
var Reflux = require('./index');


/**
 * A mixin factory for a React component. Meant as a more convenient way of using the `ListenerMixin`,
 * without having to manually set listeners in the `componentDidMount` method.
 *
 * @param {Action|Store} listenable An Action or Store that should be
 *  listened to.
 * @param {Function|String} callback The callback to register as event handler
 * @param {Function|String} defaultCallback The callback to register as default handler
 * @returns {Object} An object to be used as a mixin, which sets up the listener for the given listenable.
 */
module.exports = function(listenable,callback,initial){
    return {
        /**
         * Set up the mixin before the initial rendering occurs. Import methods from `ListenerMethods`
         * and then make the call to `listenTo` with the arguments provided to the factory function
         */
        componentDidMount: function() {
            for(var m in Reflux.ListenerMethods){
                if (this[m] !== Reflux.ListenerMethods[m]){
                    if (this[m]){
                        throw "Can't have other property '"+m+"' when using Reflux.listenTo!";
                    }
                    this[m] = Reflux.ListenerMethods[m];
                }
            }
            this.listenTo(listenable,callback,initial);
        },
        /**
         * Cleans up all listener previously registered.
         */
        componentWillUnmount: Reflux.ListenerMethods.stopListeningToAll
    };
};

},{"./index":"/home/mlindemu/crow/node_modules/reflux/src/index.js"}],"/home/mlindemu/crow/node_modules/reflux/src/listenToMany.js":[function(require,module,exports){
var Reflux = require('./index');

/**
 * A mixin factory for a React component. Meant as a more convenient way of using the `listenerMixin`,
 * without having to manually set listeners in the `componentDidMount` method. This version is used
 * to automatically set up a `listenToMany` call.
 *
 * @param {Object} listenables An object of listenables
 * @returns {Object} An object to be used as a mixin, which sets up the listeners for the given listenables.
 */
module.exports = function(listenables){
    return {
        /**
         * Set up the mixin before the initial rendering occurs. Import methods from `ListenerMethods`
         * and then make the call to `listenTo` with the arguments provided to the factory function
         */
        componentDidMount: function() {
            for(var m in Reflux.ListenerMethods){
                if (this[m] !== Reflux.ListenerMethods[m]){
                    if (this[m]){
                        throw "Can't have other property '"+m+"' when using Reflux.listenToMany!";
                    }
                    this[m] = Reflux.ListenerMethods[m];
                }
            }
            this.listenToMany(listenables);
        },
        /**
         * Cleans up all listener previously registered.
         */
        componentWillUnmount: Reflux.ListenerMethods.stopListeningToAll
    };
};

},{"./index":"/home/mlindemu/crow/node_modules/reflux/src/index.js"}],"/home/mlindemu/crow/node_modules/reflux/src/mixer.js":[function(require,module,exports){
var _ = require('./utils');

module.exports = function mix(def) {
    var composed = {
        init: [],
        preEmit: [],
        shouldEmit: []
    };

    var updated = (function mixDef(mixin) {
        var mixed = {};
        if (mixin.mixins) {
            mixin.mixins.forEach(function (subMixin) {
                _.extend(mixed, mixDef(subMixin));
            });
        }
        _.extend(mixed, mixin);
        Object.keys(composed).forEach(function (composable) {
            if (mixin.hasOwnProperty(composable)) {
                composed[composable].push(mixin[composable]);
            }
        });
        return mixed;
    }(def));

    if (composed.init.length > 1) {
        updated.init = function () {
            var args = arguments;
            composed.init.forEach(function (init) {
                init.apply(this, args);
            }, this);
        };
    }
    if (composed.preEmit.length > 1) {
        updated.preEmit = function () {
            return composed.preEmit.reduce(function (args, preEmit) {
                var newValue = preEmit.apply(this, args);
                return newValue === undefined ? args : [newValue];
            }.bind(this), arguments);
        };
    }
    if (composed.shouldEmit.length > 1) {
        updated.shouldEmit = function () {
            var args = arguments;
            return !composed.shouldEmit.some(function (shouldEmit) {
                return !shouldEmit.apply(this, args);
            }, this);
        };
    }
    Object.keys(composed).forEach(function (composable) {
        if (composed[composable].length === 1) {
            updated[composable] = composed[composable][0];
        }
    });

    return updated;
};

},{"./utils":"/home/mlindemu/crow/node_modules/reflux/src/utils.js"}],"/home/mlindemu/crow/node_modules/reflux/src/utils.js":[function(require,module,exports){
/*
 * isObject, extend, isFunction, isArguments are taken from undescore/lodash in
 * order to remove the dependency
 */
var isObject = exports.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
};

exports.extend = function(obj) {
    if (!isObject(obj)) {
        return obj;
    }
    var source, prop;
    for (var i = 1, length = arguments.length; i < length; i++) {
        source = arguments[i];
        for (prop in source) {
            obj[prop] = source[prop];
        }
    }
    return obj;
};

exports.isFunction = function(value) {
    return typeof value === 'function';
};

exports.EventEmitter = require('eventemitter3');

exports.nextTick = function(callback) {
    setTimeout(callback, 0);
};

exports.capitalize = function(string){
    return string.charAt(0).toUpperCase()+string.slice(1);
};

exports.callbackName = function(string){
    return "on"+exports.capitalize(string);
};

exports.object = function(keys,vals){
    var o={}, i=0;
    for(;i<keys.length;i++){
        o[keys[i]] = vals[i];
    }
    return o;
};

exports.Promise = require("native-promise-only");

exports.createPromise = function(resolver) {
    return new exports.Promise(resolver);
};

exports.isArguments = function(value) {
    return typeof value === 'object' && ('callee' in value) && typeof value.length === 'number';
};

exports.throwIf = function(val,msg){
    if (val){
        throw Error(msg||val);
    }
};

},{"eventemitter3":"/home/mlindemu/crow/node_modules/reflux/node_modules/eventemitter3/index.js","native-promise-only":"/home/mlindemu/crow/node_modules/reflux/node_modules/native-promise-only/npo.js"}],"/home/mlindemu/crow/public/javascripts/actions.jsx":[function(require,module,exports){
/*global require module */

var Reflux = require('reflux');

var Actions = Reflux.createActions({
    "mapLoaded": {},
    "loadFeeds": {children: ["completed", "failed"]},
    "loadSource": {children: ["completed", "failed"]},
    "showLayer": {},
    "hideLayer": {},
    "layerSelected": {},
    "layerUnselected": {},
    "timeRangeChanged": {},
    "addDataset": {},
    "loadDataset": {children: ["completed", "failed"]},
    "removeDataset": {}
});

Actions.loadFeeds.preEmit = function(){
    $.ajax({
        dataType: "json",
        url: "/feeds",
        success: Actions.loadFeeds.completed,
        failure: Actions.loadFeeds.failed
    });
};

Actions.loadSource.preEmit = function(url){
    $.ajax({
        dataType: "jsonp",
        url: url + "/layers",
        success: Actions.loadSource.completed,
        failure: Actions.loadSource.failed
    });
};

module.exports = Actions;


},{"reflux":"/home/mlindemu/crow/node_modules/reflux/index.js"}],"/home/mlindemu/crow/public/javascripts/client.jsx":[function(require,module,exports){
(function (global){
var React = (typeof window !== "undefined" ? window.React : typeof global !== "undefined" ? global.React : null);
var CROWApp = require('./components/CROWApp.jsx');

React.render(
    React.createElement(CROWApp, null),
    document.getElementById('crowapp')
);


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./components/CROWApp.jsx":"/home/mlindemu/crow/public/javascripts/components/CROWApp.jsx"}],"/home/mlindemu/crow/public/javascripts/components/CROWApp.jsx":[function(require,module,exports){
(function (global){
var React = (typeof window !== "undefined" ? window.React : typeof global !== "undefined" ? global.React : null);
var MapManager = require('./MapManager.jsx');
var Actions = require('../actions.jsx');

var CROWApp = React.createClass({displayName: "CROWApp",
    componentWillMount: function(){
        Actions.loadFeeds();
    },

    render: function() {
        return (
            React.createElement(MapManager, null)
        );
    }
});

module.exports = CROWApp;


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../actions.jsx":"/home/mlindemu/crow/public/javascripts/actions.jsx","./MapManager.jsx":"/home/mlindemu/crow/public/javascripts/components/MapManager.jsx"}],"/home/mlindemu/crow/public/javascripts/components/LogoPanel.jsx":[function(require,module,exports){
(function (global){
var React = (typeof window !== "undefined" ? window.React : typeof global !== "undefined" ? global.React : null);
var MapPanelMixin = require('./MapPanelMixin.jsx');

var LogoPanel = React.createClass({displayName: "LogoPanel",
    mixins: [MapPanelMixin],

    render: function(){
        return (
            React.createElement("div", {id: "logo-region"}, 
                React.createElement("img", {id: "logo", src: "/images/CROWLogo150.png", alt: "CROW Logo"})
            )
        );
    }
});

module.exports = LogoPanel;


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./MapPanelMixin.jsx":"/home/mlindemu/crow/public/javascripts/components/MapPanelMixin.jsx"}],"/home/mlindemu/crow/public/javascripts/components/MapManager.jsx":[function(require,module,exports){
(function (global){
var React = (typeof window !== "undefined" ? window.React : typeof global !== "undefined" ? global.React : null);
var GoogleMapsLoader = require('google-maps');
var LogoPanel = require('./LogoPanel.jsx');
var NavBar = require('./NavBar.jsx');
var PlotPanel = require('./PlotPanel.jsx');
var Actions = require('../actions.jsx');

var SourcesStore = require('../stores/SourcesStore.jsx');
var KMLLayerStore = require('../stores/KMLLayerStore.jsx');

var Reflux = require('reflux');

var _ = (typeof window !== "undefined" ? window._ : typeof global !== "undefined" ? global._ : null);

var MapManager = React.createClass({displayName: "MapManager",
    mixins: [
        Reflux.connect(SourcesStore, "sources"),
        Reflux.connect(KMLLayerStore, "visibleSourceKML")
    ],

    componentDidMount: function(){
        // Google Map load call done here because coupling to DOM in render method
        GoogleMapsLoader.KEY = 'AIzaSyCM0VMLhaVUkmn9jKpSrh1mIZB2G8RJw9E';
        GoogleMapsLoader.load(function(google){
            var mapOptions = {
                center: new google.maps.LatLng(27.760603, -84.632873),
                zoom: 7,
                mapTypeId: google.maps.MapTypeId.HYBRID,
                mapTypeControl: true,
                mapTypeControlOptions: {
                    style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
                    position: google.maps.ControlPosition.TOP_RIGHT
                },
                panControl: true,
                panControlOptions: {
                    position: google.maps.ControlPosition.RIGHT
                },
                zoomControl: true,
                zoomControlOptions: {
                    style: google.maps.ZoomControlStyle.LARGE,
                    position: google.maps.ControlPosition.RIGHT
                },
                scaleControl: true,
                scaleControlOptions: {
                    position: google.maps.ControlPosition.RIGHT
                },
                streetViewControl: false
            };
            var map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
            Actions.mapLoaded(google, map);
        });
    },

    render: function(){
        return(
            React.createElement("div", {id: "map"}, 
                React.createElement("div", {id: "map-canvas"}), 
                React.createElement(LogoPanel, {position: "TOP_LEFT"}), 
                React.createElement(NavBar, {position: "TOP_CENTER", sources: this.state.sources}), 
                React.createElement(PlotPanel, {position: "BOTTOM_CENTER"})
            )
        );
    }
});

module.exports = MapManager;


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../actions.jsx":"/home/mlindemu/crow/public/javascripts/actions.jsx","../stores/KMLLayerStore.jsx":"/home/mlindemu/crow/public/javascripts/stores/KMLLayerStore.jsx","../stores/SourcesStore.jsx":"/home/mlindemu/crow/public/javascripts/stores/SourcesStore.jsx","./LogoPanel.jsx":"/home/mlindemu/crow/public/javascripts/components/LogoPanel.jsx","./NavBar.jsx":"/home/mlindemu/crow/public/javascripts/components/NavBar.jsx","./PlotPanel.jsx":"/home/mlindemu/crow/public/javascripts/components/PlotPanel.jsx","google-maps":"/home/mlindemu/crow/node_modules/google-maps/lib/Google.js","reflux":"/home/mlindemu/crow/node_modules/reflux/index.js"}],"/home/mlindemu/crow/public/javascripts/components/MapPanelMixin.jsx":[function(require,module,exports){
var GoogleMapsLoader = require('google-maps');
var MapStore = require('../stores/MapStore.jsx');
var Reflux = require('reflux');

var MapPanelMixin = {
    mixins: [Reflux.ListenerMixin],

    onMapLoaded: function(google, map){
        var google_position = google.maps.ControlPosition[this.props.position];
        var DOM = this.getDOMNode();
        DOM.index = this.props.pos_index;
        map.controls[google_position].push(DOM);
    },

    componentDidMount: function(){
        this.listenTo(MapStore, this.onMapLoaded);
    }
};

module.exports = MapPanelMixin;


},{"../stores/MapStore.jsx":"/home/mlindemu/crow/public/javascripts/stores/MapStore.jsx","google-maps":"/home/mlindemu/crow/node_modules/google-maps/lib/Google.js","reflux":"/home/mlindemu/crow/node_modules/reflux/index.js"}],"/home/mlindemu/crow/public/javascripts/components/NavBar.jsx":[function(require,module,exports){
(function (global){
var React = (typeof window !== "undefined" ? window.React : typeof global !== "undefined" ? global.React : null);
var MapPanelMixin = require('./MapPanelMixin.jsx');
var Actions = require('../actions.jsx');

var TimeRangeForm = require('./TimeRangeForm.jsx');

var _ = (typeof window !== "undefined" ? window._ : typeof global !== "undefined" ? global._ : null);

var LayerItem = React.createClass({displayName: "LayerItem",
    getInitialState: function(){
        return {
            "checked": false
        };
    },

    onChange: function(e){
        if(e.target.checked){
            Actions.showLayer(this.props.source.url, this.props.layer.uri);
        } else {
            Actions.hideLayer(this.props.source.url, this.props.layer.uri);
        }
    },

    componentDidMount: function(){
        Actions.showLayer.listen(function(source_url, layer_uri){
            if((source_url == this.props.source.url) && (layer_uri == this.props.layer.uri)){
                this.setState({
                    "checked": true
                });
            }
        }, this);

        Actions.hideLayer.listen(function(source_url, layer_uri){
            if((source_url == this.props.source.url) && (layer_uri == this.props.layer.uri)){
                this.setState({
                    "checked": false
                });
            }
        }, this);
    },

    render: function(){
        return (
            React.createElement("li", {onClick: this.onClick}, 
                React.createElement("div", {className: "checkbox"}, 
                    React.createElement("label", null, 
                        React.createElement("input", {type: "checkbox", onChange: this.onChange, checked: this.state.checked}), " ", this.props.layer.name
                    )
                )
            )
        );
    }
});

var NavBarDropDown = React.createClass({displayName: "NavBarDropDown",
    render: function(){
        var categorizedLayers = _.groupBy(this.props.source.layers, function(layer){
            return layer.station_type;
        });

        var sourceLayers = [];
        _.each(categorizedLayers, function(layers, category){
            var layerItems = layers.map(function(layer){
                return (
                    React.createElement(LayerItem, {key: layer.uri, source: this.props.source, layer: layer})
                );
            }, this);
            sourceLayers.push(
                React.createElement("div", {key: this.props.source.provider.short_name + "." + category}, 
                    React.createElement("label", {className: "layer-group-header"}, category), 
                    React.createElement("ul", {className: "layer-group-ul"}, 
                        layerItems
                    )
                )
            );
        }, this);

        return (
            React.createElement("li", {className: "dropdown"}, 
                React.createElement("a", {href: "#", className: "dropdown-toggle", "data-toggle": "dropdown", role: "button", "aria-expanded": "false"}, this.props.source.provider.short_name, React.createElement("span", {className: "caret"})), 
                React.createElement("ul", {className: "dropdown-menu layers-ul", role: "menu"}, 
                    sourceLayers
                )
            )
        );
    }
});

var NavBar = React.createClass({displayName: "NavBar",
    mixins: [MapPanelMixin],

    render: function(){
        var dropDowns = [];
        if(this.props.sources){
            _.each(this.props.sources, function(source){
                dropDowns.push(
                    React.createElement(NavBarDropDown, {key: source.provider.url, source: source})
                );
            });
        }

        return (
            React.createElement("div", {id: "nav-region"}, 
                React.createElement("div", {id: "nav-container", className: "control-box"}, 
                    React.createElement("nav", {className: "navbar navbar-default"}, 
                        React.createElement("div", {className: "container-fluid"}, 
                          React.createElement("div", {className: "navbar-header"}, 
                            React.createElement("button", {type: "button", className: "navbar-toggle collapsed", "data-toggle": "collapse", "data-target": "#bs-example-navbar-collapse-1"}, 
                              React.createElement("span", {className: "sr-only"}, "Toggle navigation"), 
                              React.createElement("span", {className: "icon-bar"}), 
                              React.createElement("span", {className: "icon-bar"}), 
                              React.createElement("span", {className: "icon-bar"})
                            ), 
                            React.createElement("a", {className: "navbar-brand", href: "#"}, "Layers")
                          ), 
                    
                          React.createElement("div", {className: "collapse navbar-collapse", id: "bs-example-navbar-collapse-1"}, 
                            React.createElement("ul", {className: "nav navbar-nav"}, 
                                dropDowns
                            ), 
                            React.createElement(TimeRangeForm, {formClass: "navbar-form navbar-right"})
                          )
                        )
                    )
                )
            )
        );
    }
});

module.exports = NavBar;


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../actions.jsx":"/home/mlindemu/crow/public/javascripts/actions.jsx","./MapPanelMixin.jsx":"/home/mlindemu/crow/public/javascripts/components/MapPanelMixin.jsx","./TimeRangeForm.jsx":"/home/mlindemu/crow/public/javascripts/components/TimeRangeForm.jsx"}],"/home/mlindemu/crow/public/javascripts/components/PlotForm.jsx":[function(require,module,exports){
(function (global){
var React = (typeof window !== "undefined" ? window.React : typeof global !== "undefined" ? global.React : null);
var Reflux = require('reflux');
var Actions = require('../actions.jsx');

var VisibleSourcesStore = require('../stores/VisibleSourcesStore.jsx');
var SelectedLayerStore = require('../stores/SelectedLayerStore.jsx');

var _ = (typeof window !== "undefined" ? window._ : typeof global !== "undefined" ? global._ : null);
var $ = (typeof window !== "undefined" ? window.$ : typeof global !== "undefined" ? global.$ : null);

var PlotForm = React.createClass({displayName: "PlotForm",
    mixins: [Reflux.connect(VisibleSourcesStore, "sources"), Reflux.listenTo(SelectedLayerStore, "onLayerSelect")],

    onPlotFormSubmit: function(e){
        e.preventDefault();
        Actions.addDataset(this.state.selected_source_url, this.state.selected_layer_uri, this.state.selected_field_uri);
    },

    getInitialState: function(){
        return {
            "selected_source_url": null,
            "selected_layer_uri": null,
            "selected_field_uri": null,
            "sources": {}
        };
    },

    onLayerSelect: function(source_url, layer_uri){
        this.setState({
            "selected_source_url": source_url,
            "selected_layer_uri": layer_uri
        });
    },

    onFormSourceSelect: function(event){
        this.setState({
            "selected_source_url": event.target.value,
            "selected_layer_uri": null,
            "selected_field_uri": null
        });
    },

    onFormLayerSelect: function(event){
        this.setState({
            "selected_layer_uri": event.target.value,
            "selected_field_uri": null
        });
    },

    onFormFieldSelect: function(field){
        this.setState({
            "selected_field_uri": event.target.value
        });
    },    

    componentDidMount: function(){
        $('#startDateTimePicker').datetimepicker();
        $('#endDateTimePicker').datetimepicker();
    },

    render: function(){
        var emptyOption = (
            React.createElement("option", {value: null})
        );

        var sourceOptions = [];
        sourceOptions.push(emptyOption);
        _.each(this.state.sources, function(source){
            sourceOptions.push(
                React.createElement("option", {value: source.url, selected: source.url === this.state.selected_source_url}, source.provider.short_name)
            );
        }, this);

        var layerOptions = [];
        layerOptions.push(emptyOption);
        layers = VisibleSourcesStore.getLayers(this.state.selected_source_url);
        if(layers){
            _.each(layers, function(layer){
                layerOptions.push(
                    React.createElement("option", {value: layer.uri, selected: layer.uri === this.state.selected_layer_uri}, layer.name)
                );
            }, this);
        }

        var fieldOptions = [];
        fieldOptions.push(emptyOption);
        var layer = VisibleSourcesStore.getLayer(this.state.selected_source_url, this.state.selected_layer_uri);
        if(layer){
            _.each(layer.fields, function(field){
                fieldOptions.push(
                    React.createElement("option", {value: field.uri, selected: field.uri === this.state.selected_field_uri}, field.name)
                );
            }, this);
        }

        return (
React.createElement("div", {className: "row"}, 
    React.createElement("div", {className: "col-md-12"}, 
        React.createElement("form", {className: "form-inline", onSubmit: this.onPlotFormSubmit}, 
            
            React.createElement("div", {className: "form-group"}, 
                React.createElement("label", {className: "sr-only"}, "Data Source"), 
                React.createElement("select", {name: "source_url", className: "form-control plot-select", onChange: this.onFormSourceSelect}, 
                    sourceOptions
                )
            ), 

            React.createElement("div", {className: "form-group"}, 
                React.createElement("label", {className: "sr-only"}, "Layer"), 
                React.createElement("select", {name: "layer_uri", className: "form-control plot-select", onChange: this.onFormLayerSelect}, 
                    layerOptions
                )
            ), 

            React.createElement("div", {className: "form-group"}, 
                React.createElement("label", {className: "sr-only"}, "Field"), 
                React.createElement("select", {name: "field_uri", className: "form-control plot-select", onChange: this.onFormFieldSelect}, 
                    fieldOptions
                )
            ), 
            React.createElement("button", {className: "btn btn-primary", type: "submit"}, "Plot")
        )
    )
)
        );
    }
});

module.exports = PlotForm;


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../actions.jsx":"/home/mlindemu/crow/public/javascripts/actions.jsx","../stores/SelectedLayerStore.jsx":"/home/mlindemu/crow/public/javascripts/stores/SelectedLayerStore.jsx","../stores/VisibleSourcesStore.jsx":"/home/mlindemu/crow/public/javascripts/stores/VisibleSourcesStore.jsx","reflux":"/home/mlindemu/crow/node_modules/reflux/index.js"}],"/home/mlindemu/crow/public/javascripts/components/PlotPanel.jsx":[function(require,module,exports){
(function (global){
var React = (typeof window !== "undefined" ? window.React : typeof global !== "undefined" ? global.React : null);
var MapPanelMixin = require('./MapPanelMixin.jsx');
var PlotForm = require('./PlotForm.jsx');
var PlotSVG = require('./PlotSVG.jsx');

var PlotPanel = React.createClass({displayName: "PlotPanel",
    mixins: [MapPanelMixin],

    render: function(){
        return (
React.createElement("div", {id: "plot-region"}, 
    React.createElement("div", {id: "plot-container", className: "control-box"}, 
        React.createElement("div", {class: "plot-panel", className: "panel"}, 
            React.createElement("div", {className: "panel-heading"}, 
                React.createElement("h3", {className: "panel-title"}, "Plot Data")
            ), 
            React.createElement("div", {className: "panel-body"}, 
                React.createElement("div", {className: "container-fluid"}, 
                    React.createElement(PlotForm, null), 
                    React.createElement(PlotSVG, null)
                )
            )
        )
    )
)
        );
    }
});

module.exports = PlotPanel;


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./MapPanelMixin.jsx":"/home/mlindemu/crow/public/javascripts/components/MapPanelMixin.jsx","./PlotForm.jsx":"/home/mlindemu/crow/public/javascripts/components/PlotForm.jsx","./PlotSVG.jsx":"/home/mlindemu/crow/public/javascripts/components/PlotSVG.jsx"}],"/home/mlindemu/crow/public/javascripts/components/PlotSVG.jsx":[function(require,module,exports){
(function (global){
var React = (typeof window !== "undefined" ? window.React : typeof global !== "undefined" ? global.React : null);
var Reflux = require('reflux');

var TimeRangeStore = require('../stores/TimeRangeStore.jsx');
var DatasetsStore = require('../stores/DatasetsStore.jsx');

var d3 = (typeof window !== "undefined" ? window.d3 : typeof global !== "undefined" ? global.d3 : null);

var PlotSVG = React.createClass({displayName: "PlotSVG",
    mixins: [Reflux.ListenerMixin],

    margins: {
        'top': 20,
        'right': 20,
        'bottom': 20,
        'left': 20
    },

    onTimeRangeChange: function(range){
        this.timeScale.domain([range.start.toDate(), range.end.toDate()]);

        var timeAxis = d3.svg.axis().scale(this.timeScale).orient("bottom");
        this.svg.select('#timeAxis')
            .transition().duration(1000).ease('sin-in-out')
            .call(timeAxis);
    },

    setupTimeAxis: function(){
        this.timeScale = d3.time.scale()
            .domain([TimeRangeStore.range.start.toDate(), TimeRangeStore.range.end.toDate()])
            .range([this.margins.left, this.dim.width + this.margins.left]);
        this.timeScale.ticks(d3.time.hour, 12);

        var timeAxis = d3.svg.axis().scale(this.timeScale).orient("bottom");
        this.svg.append("g")
            .attr("id", "timeAxis")
            .attr("class", "timeX axis")
            .attr("transform", "translate(0,"+(this.dim.height+this.margins.top)+")")
            .call(timeAxis);
    },

    onDatasetsChange: function(datasets){
        var datasetGroups = this.svg.selectAll('.dataset')
            .data(datasets);
        
        datasetGroups.enter().append('g')
            .attr('class', 'dataset');
        datasetGroups.exit().remove();
    },

    componentDidMount: function(){
        this.svg = d3.select("#plots-area");
        this.dim = {
            height: parseInt(this.svg.style('height')) - (this.margins.top + this.margins.bottom),
            width: parseInt(this.svg.style('width')) - (this.margins.left + this.margins.right)
        };

        this.setupTimeAxis();

        this.listenTo(TimeRangeStore, this.onTimeRangeChange);
        this.listenTo(DatasetsStore, this.onDatasetsChange);
    },

    render: function(){
        return (
React.createElement("div", {class: "row"}, 
    React.createElement("div", {class: "col-md-12"}, 
        React.createElement("svg", {id: "plots-area"})
    )
)
        );
    }
});

module.exports = PlotSVG;


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../stores/DatasetsStore.jsx":"/home/mlindemu/crow/public/javascripts/stores/DatasetsStore.jsx","../stores/TimeRangeStore.jsx":"/home/mlindemu/crow/public/javascripts/stores/TimeRangeStore.jsx","reflux":"/home/mlindemu/crow/node_modules/reflux/index.js"}],"/home/mlindemu/crow/public/javascripts/components/TimeRangeForm.jsx":[function(require,module,exports){
(function (global){
var React = (typeof window !== "undefined" ? window.React : typeof global !== "undefined" ? global.React : null);
var Reflux = require('reflux');
var Actions = require('../actions.jsx');

var TimeRangeStore = require('../stores/TimeRangeStore.jsx');

var $ = (typeof window !== "undefined" ? window.$ : typeof global !== "undefined" ? global.$ : null);
var moment = (typeof window !== "undefined" ? window.moment : typeof global !== "undefined" ? global.moment : null);

var TimeRangeForm = React.createClass({displayName: "TimeRangeForm",
    mixins: [Reflux.listenTo(TimeRangeStore, "onRangeChange")],

    onRangeChange: function(range){
        $('#startDatePicker').data("DateTimePicker").date(range.start);
        $('#endDatePicker').data("DateTimePicker").date(range.end);
    },

    componentDidMount: function(){
        $('#startDatePicker').datetimepicker();
        $('#endDatePicker').datetimepicker();

        $('#startDatePicker').on("dp.change", function(e){
            $('#endDatePicker').data("DateTimePicker").minDate(e.date);
            Actions.timeRangeChanged(e.date, TimeRangeStore.range.end);
        });

        $('#endDatePicker').on("dp.change", function(e){
            $('#startDatePicker').data("DateTimePicker").maxDate(e.date);
            Actions.timeRangeChanged(TimeRangeStore.range.start, e.date);
        });

        $('#startDatePicker').data("DateTimePicker").date(TimeRangeStore.range.start);
        $('#endDatePicker').data("DateTimePicker").date(TimeRangeStore.range.end);
    },

    render: function(){
        return (
React.createElement("form", {className: this.props.formClass}, 
    React.createElement("div", {className: "form-group"}, 
        React.createElement("label", {for: "startDate"}, "From:"), 
        React.createElement("input", {id: "startDatePicker", name: "startDate", type: "text", className: "form-control"})
    ), 

    React.createElement("div", {className: "form-group"}, 
        React.createElement("label", {for: "endDate"}, "to"), 
        React.createElement("input", {id: "endDatePicker", name: "endDate", type: "text", className: "form-control"})
    )
)
        );
    }
});

module.exports = TimeRangeForm;


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../actions.jsx":"/home/mlindemu/crow/public/javascripts/actions.jsx","../stores/TimeRangeStore.jsx":"/home/mlindemu/crow/public/javascripts/stores/TimeRangeStore.jsx","reflux":"/home/mlindemu/crow/node_modules/reflux/index.js"}],"/home/mlindemu/crow/public/javascripts/stores/DatasetsStore.jsx":[function(require,module,exports){
var Reflux = require('reflux');
var Actions = require('../actions.jsx');

var TimeRangeStore = require('./TimeRangeStore.jsx');

var DatasetsStore = Reflux.createStore({
    init: function(){
        this.datasets = [];

        this.listenTo(Actions.addDataset, this.onAddDataset);
        this.listenTo(Actions.removeDataset, this.onRemoveDataset);

        this.listenTo(Actions.loadDataset.completed, this.onDatasetLoaded);
        this.listenTo(Actions.loadDataset.failed, this.onDatasetLoadFailed);
    },

    onAddDataset: function(source_url, layer_uri, field_uri){
        var base_url = "//" + source_url + "/layer/" + layer_uri + "/field/" + field_uri + "/data";
        var url = base_url + "?start=" + TimeRangeStore.range.start.unix();
        url += "&end=" + TimeRangeStore.range.end.unix();

        this.datasets.push(url);
        this.trigger(this.datasets);

        /*
        Actions.loadDataset.listen(function(url){
            $.ajax({
                dataType: "jsonp",
                url: url,
                success: function(data){
                    Actions.loadDataset.completed(base_url, data);
                },
                failure: Actions.loadDataset.failed
            });
        });
        */
    },

    onRemoveDataset: function(index){
        if(index > 0 && index < datasets.length){
            datasets.splice(index);
            this.trigger(datasets);
        } else {
            console.log("Bad index passed to remove datasets action: " + index);
        }
    },

    onDatasetLoaded: function(base_url, data){
        console.log(base_url);
        console.log(data);
    },

    onDatasetLoadFailed: function(response){
        console.log("Error loading plot data: " + response);
    }
});

module.exports = DatasetsStore;


},{"../actions.jsx":"/home/mlindemu/crow/public/javascripts/actions.jsx","./TimeRangeStore.jsx":"/home/mlindemu/crow/public/javascripts/stores/TimeRangeStore.jsx","reflux":"/home/mlindemu/crow/node_modules/reflux/index.js"}],"/home/mlindemu/crow/public/javascripts/stores/KMLLayerStore.jsx":[function(require,module,exports){
(function (global){
var Reflux = require('reflux');

var MapStore = require('./MapStore.jsx');
var VisibleSourcesStore = require('./VisibleSourcesStore.jsx');
var TimeRangeStore = require('./TimeRangeStore.jsx');

var Actions = require('../actions.jsx');

var _ = (typeof window !== "undefined" ? window._ : typeof global !== "undefined" ? global._ : null);

var KMLLayerStore = Reflux.createStore({
    init: function(){
        this.visibleSourceKML = {};
        this.listenTo(Actions.mapLoaded, this.onMapLoaded);
    },

    onMapLoaded: function(google, map){
        this.onVisibleSourcesChange(VisibleSourcesStore.sources);

        this.listenTo(VisibleSourcesStore, this.onVisibleSourcesChange);
        this.listenTo(TimeRangeStore, this.onTimeRangeChange);
    },

    _genURL: function(source_url, layer_uri){
        var url = "http://" + source_url + "/layer/" + layer_uri + "/kml";
        url += "?start=" + TimeRangeStore.range.start.unix();
        url += "&end=" + TimeRangeStore.range.end.unix();
        return url;
    },

    onVisibleSourcesChange: function(visibleSources){
        // For each visible source
        _.each(visibleSources, function(visibleSource, source_url){
            // Create a new visible KML source group if necessary
            if(!(source_url in this.visibleSourceKML)){
                this.visibleSourceKML[source_url] = {};
            }

            // Create sets of keys for differencing below
            var currentKeys = _.keys(this.visibleSourceKML[source_url]);
            var newKeys = _.keys(visibleSource.layers);

            // Add newly visible layers
            var addedKeys = _.difference(newKeys, currentKeys);
            addedKeys.forEach(function(layer_uri){
                var url = this._genURL(source_url, layer_uri);
                var kml = new MapStore.google.maps.KmlLayer({
                    url: url,
                    preserveViewport: true
                });
                kml.setMap(MapStore.map);

                MapStore.google.maps.event.addListener(kml, 'click', function(){
                    Actions.layerSelected(source_url, layer_uri);
                });

                this.visibleSourceKML[source_url][layer_uri] = kml;
            }, this);

            // Remove no longer visible layers
            var removedKeys = _.difference(currentKeys, newKeys);
            removedKeys.forEach(function(layer_uri){
                this.visibleSourceKML[source_url][layer_uri].setMap(null);
                MapStore.google.maps.event.clearInstanceListeners(this.visibleSourceKML[source_url][layer_uri]);
                delete this.visibleSourceKML[source_url][layer_uri];
            }, this);
        }, this);
    },

    onTimeRangeChange: function(range){
        _.each(this.visibleSourceKML, function(visibleSources, source_url){
            _.each(this.visibleSourceKML[source_url], function(layer, layer_uri){
                var url = this._genURL(source_url, layer_uri);
                this.visibleSourceKML[source_url][layer_uri].setUrl(url);
            }, this);
        }, this);
    }
});

module.exports = KMLLayerStore;


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../actions.jsx":"/home/mlindemu/crow/public/javascripts/actions.jsx","./MapStore.jsx":"/home/mlindemu/crow/public/javascripts/stores/MapStore.jsx","./TimeRangeStore.jsx":"/home/mlindemu/crow/public/javascripts/stores/TimeRangeStore.jsx","./VisibleSourcesStore.jsx":"/home/mlindemu/crow/public/javascripts/stores/VisibleSourcesStore.jsx","reflux":"/home/mlindemu/crow/node_modules/reflux/index.js"}],"/home/mlindemu/crow/public/javascripts/stores/MapStore.jsx":[function(require,module,exports){
var Reflux = require('reflux');
var Actions = require('../actions.jsx');

var MapStore = Reflux.createStore({
    init: function(){
        this.listenTo(Actions.mapLoaded, this.onMapLoaded);
    },

    onMapLoaded: function(google, map){
        this.google = google;
        this.map = map;

        this.trigger(google, map);
    }
});

module.exports = MapStore;


},{"../actions.jsx":"/home/mlindemu/crow/public/javascripts/actions.jsx","reflux":"/home/mlindemu/crow/node_modules/reflux/index.js"}],"/home/mlindemu/crow/public/javascripts/stores/SelectedLayerStore.jsx":[function(require,module,exports){
var Reflux = require('reflux');
var Actions = require('../actions.jsx');

var SelectedLayerStore = Reflux.createStore({
    init: function(){
        this.listenTo(Actions.layerSelected, this.onLayerSelected);
    },

    onLayerSelected: function(source_url, layer_uri){
        this.source_url = source_url;
        this.layer_uri = layer_uri;

        this.trigger(this.source_url, this.layer_uri);
    }
});

module.exports = SelectedLayerStore;


},{"../actions.jsx":"/home/mlindemu/crow/public/javascripts/actions.jsx","reflux":"/home/mlindemu/crow/node_modules/reflux/index.js"}],"/home/mlindemu/crow/public/javascripts/stores/SourcesStore.jsx":[function(require,module,exports){
(function (global){
var Reflux = require('reflux');
var Actions = require('../actions.jsx');
var SourcesStoreMixin = require('./SourcesStoreMixin.jsx');

var _ = (typeof window !== "undefined" ? window._ : typeof global !== "undefined" ? global._ : null);

var SourcesStore = Reflux.createStore({
    mixins: [SourcesStoreMixin],

    init: function(){
        this.sources = {};
        this.listenTo(Actions.loadFeeds.completed, this.onLoadFeeds);
        this.listenTo(Actions.loadSource.completed, this.onLoadSource);
    },

    onLoadFeeds: function(feeds){
        feeds.forEach(function(feed){
            Actions.loadSource(feed.url);
        });
    },

    onLoadSource: function(source){
        this.sources[source.url] = source;

        _.forEach(source.layers, function(layer, layer_uri){
            Actions.showLayer(source.url, layer_uri);
        }, this);

        this.trigger(this.sources);
    }
});

module.exports = SourcesStore;


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../actions.jsx":"/home/mlindemu/crow/public/javascripts/actions.jsx","./SourcesStoreMixin.jsx":"/home/mlindemu/crow/public/javascripts/stores/SourcesStoreMixin.jsx","reflux":"/home/mlindemu/crow/node_modules/reflux/index.js"}],"/home/mlindemu/crow/public/javascripts/stores/SourcesStoreMixin.jsx":[function(require,module,exports){

var SourcesStoreMixin = {
    sourceExists: function(source_url){
        return (source_url in this.sources);
    },

    getSource: function(source_url){
        if(this.sourceExists(source_url)){
            return this.sources[source_url];
        }
        return undefined;
    },

    layerExists: function(source_url, layer_uri){
        if(source_url in this.sources){
            if(layer_uri in this.sources[source_url].layers){
                return true;
            }
        }
        return false;
    },

    getLayers: function(source_url){
        if(source_url in this.sources){
            return this.sources[source_url].layers;
        }

        return undefined;
    },

    getLayer: function(source_url, layer_uri){
        if(this.layerExists(source_url, layer_uri)){
            return this.sources[source_url].layers[layer_uri];
        }

        return undefined;
    },

    setLayer: function(source_url, layer_uri, layer){
        var layers = this.getLayers(source_url);
        layers[layer_uri] = layer;
    }
};

module.exports = SourcesStoreMixin;


},{}],"/home/mlindemu/crow/public/javascripts/stores/TimeRangeStore.jsx":[function(require,module,exports){
(function (global){
var Reflux = require('reflux');
var Actions = require('../actions.jsx');

var moment = (typeof window !== "undefined" ? window.moment : typeof global !== "undefined" ? global.moment : null);

var TimeRangeStore = Reflux.createStore({
    init: function(){
        this.range = {
            "start": moment().subtract(5, 'days'),
            "end": moment()
        };

        this.listenTo(Actions.timeRangeChanged, this.onTimeRangeChanged);
    },

    onTimeRangeChanged: function(startDate, endDate){
        this.range = {
            "start": startDate,
            "end": endDate
        };

        this.trigger(this.range);
    }
});

module.exports = TimeRangeStore;


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../actions.jsx":"/home/mlindemu/crow/public/javascripts/actions.jsx","reflux":"/home/mlindemu/crow/node_modules/reflux/index.js"}],"/home/mlindemu/crow/public/javascripts/stores/VisibleSourcesStore.jsx":[function(require,module,exports){
(function (global){
var Reflux = require('reflux');
var Actions = require('../actions.jsx');
var SourcesStore = require('./SourcesStore.jsx');
var SourcesStoreMixin = require('./SourcesStoreMixin.jsx');

var _ = (typeof window !== "undefined" ? window._ : typeof global !== "undefined" ? global._ : null);

var VisibleSourcesStore = Reflux.createStore({
    mixins: [SourcesStoreMixin],

    init: function(){
        this.sources = {};
        this.listenTo(Actions.showLayer, this.onShowLayer);
        this.listenTo(Actions.hideLayer, this.onHideLayer);
    },

    onShowLayer: function(source_url, layer_uri){
        if(!(source_url in this.sources)){
            var source = SourcesStore.getSource(source_url);
            this.sources[source_url] = _.omit(source, 'layers');
            this.sources[source_url].layers = {};
        }

        var layer = SourcesStore.getLayer(source_url, layer_uri);
        this.setLayer(source_url, layer_uri, layer);
        this.trigger(this.sources);
    },

    onHideLayer: function(source_url, layer_uri){
        if(this.layerExists(source_url, layer_uri)){
            delete this.sources[source_url].layers[layer_uri];

            if(_.size(this.sources[source_url].layers) === 0){
                delete this.sources[source_url];
            }

            this.trigger(this.sources);
        }
    }
});

module.exports = VisibleSourcesStore;


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../actions.jsx":"/home/mlindemu/crow/public/javascripts/actions.jsx","./SourcesStore.jsx":"/home/mlindemu/crow/public/javascripts/stores/SourcesStore.jsx","./SourcesStoreMixin.jsx":"/home/mlindemu/crow/public/javascripts/stores/SourcesStoreMixin.jsx","reflux":"/home/mlindemu/crow/node_modules/reflux/index.js"}]},{},["/home/mlindemu/crow/public/javascripts/client.jsx"])
//# sourceMappingURL=data:application/json;base64,
